plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on util mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url 'https://jitpack.io' }

	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
		}
	}

	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}

	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}

	maven { url = "https://maven.kyrptonaught.dev" }

	maven {
		name = "FzzyMaven"
		url = "https://maven.fzzyhmstrs.me/"
	}

	maven {
		name = "JTDev-Maven-Repository"
		url = "https://maven.jt-dev.tech/releases"
	}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	// GeckoLib : Animations :3
	modImplementation("software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}")

	modImplementation("net.kyrptonaught:customportalapi:0.0.1-beta64-1.20")
	include("net.kyrptonaught:customportalapi:0.0.1-beta64-1.20")

	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}")
	include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	include("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}")

	modImplementation("dev.emi:trinkets:${trinkets_version}")

	modImplementation("me.fzzyhmstrs:fzzy_config:${project.fzzy_config_version}")
	modCompileOnly("net.fabricmc:fabric-language-kotlin:1.13.3+kotlin.2.1.21")

	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

	modCompileOnly("dev.corgitaco.enhancedcelestials:Enhanced-Celestials-fabric:${project.minecraft_version}-${project.enhanced_celestials_version}")
	modRuntimeOnly("dev.corgitaco.enhancedcelestials:Enhanced-Celestials-fabric:${project.minecraft_version}-${project.enhanced_celestials_version}")

	modCompileOnly("dev.corgitaco:Data_Anchor-fabric-${project.minecraft_version}:${project.data_anchor_version}")
	modRuntimeOnly("dev.corgitaco:Data_Anchor-fabric-${project.minecraft_version}:${project.data_anchor_version}")

	implementation("com.eliotlash.mclib:mclib:20")

	implementation("com.github.Chocohead:Fabric-ASM:v2.3")
	include("com.github.Chocohead:Fabric-ASM:v2.3")
}

loom {
	accessWidenerPath = file("src/main/resources/man-from-the-fog.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}